mod :- NP/N : (lambda $0:<e,t> (lambda $1:e (and:<t*,t> (mod:<e,t> $1) ($0 $1))))
mod :- N/NP : (lambda $0:<e,t> (lambda $1:e (and:<t*,t> (mod:<e,t> $1) ($0 $1))))



type raise modified things

pickup :- S/NP : (lambda $1:a (lambda $0:<e,t> (and:<t*,t> (pickup:<a,t> $1) (obj:<<e,t>,<a,t>> $0 $1)))


type raising for prepositional phrases like "pick up" -> "pickup:d;alksjdf;asjfd"

self<e,t> can have properties as well


order of resolution, should pickup look for actor first, or look for object first

prune on the basis of, pickup should look for brad, not the other way around


pickup :- (N\S)/NP : (lambda $0:<e,t> (lambda $1:a (and:<t*,t> (obj:<a,<<e,t>,t>> $1 (lambda $2:e ($0 $2))) (pickup:<a,t> $1) (actor:<a,<<e,t>,t>> $1 self:<e,t>))))


mod obj
(lambda $0:e (and:<t*,t> (obj:<e,t> $0) (mod:<e,t> $0)))

blue mod obj
(lambda $0:e (and:<t*,t> (obj:<e,t> $0) (mod:<e,t> $0) (blue:<e,t> $0)))

the blue mod obj
(lambda $0:e (and:<t*,t> (obj:<e,t> $0) (def:<e,t> $0) (blue:<e,t> $0) (mod:<e,t> $0)))

pickup the blue mod obj
(lambda $0:a (and:<t*,t> (pickup:<a,t> $0) (actor:<a,<<e,t>,t>> $0 self:<e,t>) (obj:<a,<<e,t>,t>> $0 (lambda $1:e (and:<t*,t> (obj:<e,t> $1) (def:<e,t> $1) (blue:<e,t> $1) (mod:<e,t> $1))))))

brad pickup the blue mod obj
(lambda $0:a (and:<t*,t> (pickup:<a,t> $0) (actor:<a,<<e,t>,t>> $0 brad:<e,t>) (obj:<a,<<e,t>,t>> $0 (lambda $1:e (and:<t*,t> (obj:<e,t> $1) (def:<e,t> $1) (blue:<e,t> $1) (mod:<e,t> $1))))))

mod obj
(lambda $0:e (and:<t*,t> (obj:<e,t> $0) (mod:<e,t> $0)))

blue mod obj
(lambda $0:e (and:<t*,t> (obj:<e,t> $0) (mod:<e,t> $0) (blue:<e,t> $0)))

the blue mod obj
(lambda $0:e (and:<t*,t> (obj:<e,t> $0) (def:<e,t> $0) (blue:<e,t> $0) (mod:<e,t> $0)))

pickup the blue mod obj
(lambda $0:a (and:<t*,t> (pickup:<a,t> $0) (actor:<a,<<e,t>,t>> $0 self:<e,t>) (obj:<a,<<e,t>,t>> $0 (lambda $1:e (and:<t*,t> (obj:<e,t> $1) (def:<e,t> $1) (blue:<e,t> $1) (mod:<e,t> $1))))))

brad pickup the blue mod obj
(lambda $0:a (and:<t*,t> (pickup:<a,t> $0) (actor:<a,<<e,t>,t>> $0 brad:<e,t>) (obj:<a,<<e,t>,t>> $0 (lambda $1:e (and:<t*,t> (obj:<e,t> $1) (def:<e,t> $1) (blue:<e,t> $1) (mod:<e,t> $1))))))

******************************

mod obj
(lambda $0:e (and:<t*,t> (obj:<e,t> $0) (mod:<e,t> $0)))

blue mod obj
(lambda $0:e (and:<t*,t> (obj:<e,t> $0) (mod:<e,t> $0) (blue:<e,t> $0)))

the blue mod obj
(lambda $0:e (and:<t*,t> (obj:<e,t> $0) (def:<e,t> $0) (blue:<e,t> $0) (mod:<e,t> $0)))

pickup the blue mod obj
(lambda $0:a (and:<t*,t> (pickup:<a,t> $0) (actor:<a,<<e,t>,t>> $0 self:<e,t>) (obj:<a,<<e,t>,t>> $0 (lambda $1:e (and:<t*,t> (obj:<e,t> $1) (def:<e,t> $1) (blue:<e,t> $1) (mod:<e,t> $1))))))

brad pickup the blue mod obj
(lambda $0:a (and:<t*,t> (pickup:<a,t> $0) (actor:<a,<<e,t>,t>> $0 brad:<e,t>) (obj:<a,<<e,t>,t>> $0 (lambda $1:e (and:<t*,t> (obj:<e,t> $1) (def:<e,t> $1) (blue:<e,t> $1) (mod:<e,t> $1))))))




pickup the blue mod obj
(lambda $0:a (and:<t*,t> (pickup:<a,t> $0) (actor:<a,<<e,t>,t>> $0 self:<e,t>) (obj:<a,<<e,t>,t>> $0 (lambda $1:e (and:<t*,t> (obj:<e,t> $1) (def:<e,t> $1) (blue:<e,t> $1) (mod:<e,t> $1))))))




pick up can either be a type raising rule, or treated as one thign

Before can be used in the following ways:
as a conjunction (connecting two clauses): Think carefully before you choose.
as a preposition (followed by a noun): We’ll finish the project before Christmas.
as an adverb (without a following noun): I’d met him once before.







